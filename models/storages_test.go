// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testStorages(t *testing.T) {
	t.Parallel()

	query := Storages(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testStoragesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	storage := &Storage{}
	if err = randomize.Struct(seed, storage, storageDBTypes, true, storageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Storage struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = storage.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = storage.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Storages(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStoragesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	storage := &Storage{}
	if err = randomize.Struct(seed, storage, storageDBTypes, true, storageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Storage struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = storage.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Storages(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Storages(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStoragesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	storage := &Storage{}
	if err = randomize.Struct(seed, storage, storageDBTypes, true, storageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Storage struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = storage.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := StorageSlice{storage}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Storages(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testStoragesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	storage := &Storage{}
	if err = randomize.Struct(seed, storage, storageDBTypes, true, storageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Storage struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = storage.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := StorageExists(tx, storage.ID)
	if err != nil {
		t.Errorf("Unable to check if Storage exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StorageExistsG to return true, but got false.")
	}
}
func testStoragesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	storage := &Storage{}
	if err = randomize.Struct(seed, storage, storageDBTypes, true, storageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Storage struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = storage.Insert(tx); err != nil {
		t.Error(err)
	}

	storageFound, err := FindStorage(tx, storage.ID)
	if err != nil {
		t.Error(err)
	}

	if storageFound == nil {
		t.Error("want a record, got nil")
	}
}
func testStoragesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	storage := &Storage{}
	if err = randomize.Struct(seed, storage, storageDBTypes, true, storageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Storage struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = storage.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Storages(tx).Bind(storage); err != nil {
		t.Error(err)
	}
}

func testStoragesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	storage := &Storage{}
	if err = randomize.Struct(seed, storage, storageDBTypes, true, storageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Storage struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = storage.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Storages(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStoragesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	storageOne := &Storage{}
	storageTwo := &Storage{}
	if err = randomize.Struct(seed, storageOne, storageDBTypes, false, storageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Storage struct: %s", err)
	}
	if err = randomize.Struct(seed, storageTwo, storageDBTypes, false, storageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Storage struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = storageOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = storageTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Storages(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStoragesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	storageOne := &Storage{}
	storageTwo := &Storage{}
	if err = randomize.Struct(seed, storageOne, storageDBTypes, false, storageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Storage struct: %s", err)
	}
	if err = randomize.Struct(seed, storageTwo, storageDBTypes, false, storageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Storage struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = storageOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = storageTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Storages(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testStoragesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	storage := &Storage{}
	if err = randomize.Struct(seed, storage, storageDBTypes, true, storageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Storage struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = storage.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Storages(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStoragesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	storage := &Storage{}
	if err = randomize.Struct(seed, storage, storageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Storage struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = storage.Insert(tx, storageColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Storages(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStorageToManyFiles(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Storage
	var b, c File

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, storageDBTypes, true, storageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Storage struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, fileDBTypes, false, fileColumnsWithDefault...)
	randomize.Struct(seed, &c, fileDBTypes, false, fileColumnsWithDefault...)

	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"files_storages\" (\"storage_id\", \"file_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"files_storages\" (\"storage_id\", \"file_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	file, err := a.Files(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range file {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StorageSlice{&a}
	if err = a.L.LoadFiles(tx, false, (*[]*Storage)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Files); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Files = nil
	if err = a.L.LoadFiles(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Files); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", file)
	}
}

func testStorageToManyAddOpFiles(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Storage
	var b, c, d, e File

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, storageDBTypes, false, strmangle.SetComplement(storagePrimaryKeyColumns, storageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*File{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, fileDBTypes, false, strmangle.SetComplement(filePrimaryKeyColumns, fileColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*File{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFiles(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Storages[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Storages[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Files[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Files[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Files(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testStorageToManySetOpFiles(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Storage
	var b, c, d, e File

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, storageDBTypes, false, strmangle.SetComplement(storagePrimaryKeyColumns, storageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*File{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, fileDBTypes, false, strmangle.SetComplement(filePrimaryKeyColumns, fileColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetFiles(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Files(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetFiles(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Files(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Storages) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Storages) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Storages[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Storages[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Files[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Files[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testStorageToManyRemoveOpFiles(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Storage
	var b, c, d, e File

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, storageDBTypes, false, strmangle.SetComplement(storagePrimaryKeyColumns, storageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*File{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, fileDBTypes, false, strmangle.SetComplement(filePrimaryKeyColumns, fileColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddFiles(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Files(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveFiles(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Files(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Storages) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Storages) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Storages[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Storages[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Files) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Files[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Files[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testStoragesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	storage := &Storage{}
	if err = randomize.Struct(seed, storage, storageDBTypes, true, storageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Storage struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = storage.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = storage.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testStoragesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	storage := &Storage{}
	if err = randomize.Struct(seed, storage, storageDBTypes, true, storageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Storage struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = storage.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := StorageSlice{storage}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testStoragesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	storage := &Storage{}
	if err = randomize.Struct(seed, storage, storageDBTypes, true, storageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Storage struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = storage.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Storages(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	storageDBTypes = map[string]string{`Access`: `character varying`, `Country`: `character`, `ID`: `bigint`, `Location`: `character varying`, `Name`: `character varying`, `Status`: `character varying`}
	_              = bytes.MinRead
)

func testStoragesUpdate(t *testing.T) {
	t.Parallel()

	if len(storageColumns) == len(storagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	storage := &Storage{}
	if err = randomize.Struct(seed, storage, storageDBTypes, true, storageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Storage struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = storage.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Storages(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, storage, storageDBTypes, true, storageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Storage struct: %s", err)
	}

	if err = storage.Update(tx); err != nil {
		t.Error(err)
	}
}

func testStoragesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(storageColumns) == len(storagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	storage := &Storage{}
	if err = randomize.Struct(seed, storage, storageDBTypes, true, storageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Storage struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = storage.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Storages(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, storage, storageDBTypes, true, storagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Storage struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(storageColumns, storagePrimaryKeyColumns) {
		fields = storageColumns
	} else {
		fields = strmangle.SetComplement(
			storageColumns,
			storagePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(storage))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := StorageSlice{storage}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testStoragesUpsert(t *testing.T) {
	t.Parallel()

	if len(storageColumns) == len(storagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	storage := Storage{}
	if err = randomize.Struct(seed, &storage, storageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Storage struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = storage.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Storage: %s", err)
	}

	count, err := Storages(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &storage, storageDBTypes, false, storagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Storage struct: %s", err)
	}

	if err = storage.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Storage: %s", err)
	}

	count, err = Storages(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
