// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testBlogPosts(t *testing.T) {
	t.Parallel()

	query := BlogPosts(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testBlogPostsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogPost := &BlogPost{}
	if err = randomize.Struct(seed, blogPost, blogPostDBTypes, true, blogPostColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlogPost struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogPost.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = blogPost.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := BlogPosts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBlogPostsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogPost := &BlogPost{}
	if err = randomize.Struct(seed, blogPost, blogPostDBTypes, true, blogPostColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlogPost struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogPost.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = BlogPosts(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := BlogPosts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBlogPostsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogPost := &BlogPost{}
	if err = randomize.Struct(seed, blogPost, blogPostDBTypes, true, blogPostColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlogPost struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogPost.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := BlogPostSlice{blogPost}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := BlogPosts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testBlogPostsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogPost := &BlogPost{}
	if err = randomize.Struct(seed, blogPost, blogPostDBTypes, true, blogPostColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlogPost struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogPost.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := BlogPostExists(tx, blogPost.ID)
	if err != nil {
		t.Errorf("Unable to check if BlogPost exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BlogPostExistsG to return true, but got false.")
	}
}
func testBlogPostsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogPost := &BlogPost{}
	if err = randomize.Struct(seed, blogPost, blogPostDBTypes, true, blogPostColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlogPost struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogPost.Insert(tx); err != nil {
		t.Error(err)
	}

	blogPostFound, err := FindBlogPost(tx, blogPost.ID)
	if err != nil {
		t.Error(err)
	}

	if blogPostFound == nil {
		t.Error("want a record, got nil")
	}
}
func testBlogPostsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogPost := &BlogPost{}
	if err = randomize.Struct(seed, blogPost, blogPostDBTypes, true, blogPostColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlogPost struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogPost.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = BlogPosts(tx).Bind(blogPost); err != nil {
		t.Error(err)
	}
}

func testBlogPostsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogPost := &BlogPost{}
	if err = randomize.Struct(seed, blogPost, blogPostDBTypes, true, blogPostColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlogPost struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogPost.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := BlogPosts(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBlogPostsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogPostOne := &BlogPost{}
	blogPostTwo := &BlogPost{}
	if err = randomize.Struct(seed, blogPostOne, blogPostDBTypes, false, blogPostColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlogPost struct: %s", err)
	}
	if err = randomize.Struct(seed, blogPostTwo, blogPostDBTypes, false, blogPostColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlogPost struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogPostOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = blogPostTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := BlogPosts(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBlogPostsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	blogPostOne := &BlogPost{}
	blogPostTwo := &BlogPost{}
	if err = randomize.Struct(seed, blogPostOne, blogPostDBTypes, false, blogPostColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlogPost struct: %s", err)
	}
	if err = randomize.Struct(seed, blogPostTwo, blogPostDBTypes, false, blogPostColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlogPost struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogPostOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = blogPostTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := BlogPosts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testBlogPostsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogPost := &BlogPost{}
	if err = randomize.Struct(seed, blogPost, blogPostDBTypes, true, blogPostColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlogPost struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogPost.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := BlogPosts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBlogPostsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogPost := &BlogPost{}
	if err = randomize.Struct(seed, blogPost, blogPostDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BlogPost struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogPost.Insert(tx, blogPostColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := BlogPosts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBlogPostToOneBlogUsingBlog(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local BlogPost
	var foreign Blog

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, blogPostDBTypes, false, blogPostColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlogPost struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, blogDBTypes, false, blogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blog struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.BlogID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Blog(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := BlogPostSlice{&local}
	if err = local.L.LoadBlog(tx, false, (*[]*BlogPost)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Blog == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Blog = nil
	if err = local.L.LoadBlog(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Blog == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBlogPostToOneSetOpBlogUsingBlog(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a BlogPost
	var b, c Blog

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, blogPostDBTypes, false, strmangle.SetComplement(blogPostPrimaryKeyColumns, blogPostColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, blogDBTypes, false, strmangle.SetComplement(blogPrimaryKeyColumns, blogColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, blogDBTypes, false, strmangle.SetComplement(blogPrimaryKeyColumns, blogColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Blog{&b, &c} {
		err = a.SetBlog(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Blog != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.BlogPosts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.BlogID != x.ID {
			t.Error("foreign key was wrong value", a.BlogID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BlogID))
		reflect.Indirect(reflect.ValueOf(&a.BlogID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.BlogID != x.ID {
			t.Error("foreign key was wrong value", a.BlogID, x.ID)
		}
	}
}
func testBlogPostsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogPost := &BlogPost{}
	if err = randomize.Struct(seed, blogPost, blogPostDBTypes, true, blogPostColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlogPost struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogPost.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = blogPost.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testBlogPostsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogPost := &BlogPost{}
	if err = randomize.Struct(seed, blogPost, blogPostDBTypes, true, blogPostColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlogPost struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogPost.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := BlogPostSlice{blogPost}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testBlogPostsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogPost := &BlogPost{}
	if err = randomize.Struct(seed, blogPost, blogPostDBTypes, true, blogPostColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlogPost struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogPost.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := BlogPosts(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	blogPostDBTypes = map[string]string{`BlogID`: `bigint`, `Content`: `text`, `CreatedAt`: `timestamp with time zone`, `ID`: `bigint`, `PostedAt`: `timestamp without time zone`, `Title`: `text`, `WPID`: `bigint`}
	_               = bytes.MinRead
)

func testBlogPostsUpdate(t *testing.T) {
	t.Parallel()

	if len(blogPostColumns) == len(blogPostPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	blogPost := &BlogPost{}
	if err = randomize.Struct(seed, blogPost, blogPostDBTypes, true, blogPostColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlogPost struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogPost.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := BlogPosts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, blogPost, blogPostDBTypes, true, blogPostColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlogPost struct: %s", err)
	}

	if err = blogPost.Update(tx); err != nil {
		t.Error(err)
	}
}

func testBlogPostsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(blogPostColumns) == len(blogPostPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	blogPost := &BlogPost{}
	if err = randomize.Struct(seed, blogPost, blogPostDBTypes, true, blogPostColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlogPost struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogPost.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := BlogPosts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, blogPost, blogPostDBTypes, true, blogPostPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BlogPost struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(blogPostColumns, blogPostPrimaryKeyColumns) {
		fields = blogPostColumns
	} else {
		fields = strmangle.SetComplement(
			blogPostColumns,
			blogPostPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(blogPost))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := BlogPostSlice{blogPost}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testBlogPostsUpsert(t *testing.T) {
	t.Parallel()

	if len(blogPostColumns) == len(blogPostPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	blogPost := BlogPost{}
	if err = randomize.Struct(seed, &blogPost, blogPostDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BlogPost struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogPost.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert BlogPost: %s", err)
	}

	count, err := BlogPosts(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &blogPost, blogPostDBTypes, false, blogPostPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BlogPost struct: %s", err)
	}

	if err = blogPost.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert BlogPost: %s", err)
	}

	count, err = BlogPosts(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
