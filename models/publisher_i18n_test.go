// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testPublisherI18ns(t *testing.T) {
	t.Parallel()

	query := PublisherI18ns(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testPublisherI18nsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publisherI18n := &PublisherI18n{}
	if err = randomize.Struct(seed, publisherI18n, publisherI18nDBTypes, true, publisherI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisherI18n.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = publisherI18n.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := PublisherI18ns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPublisherI18nsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publisherI18n := &PublisherI18n{}
	if err = randomize.Struct(seed, publisherI18n, publisherI18nDBTypes, true, publisherI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisherI18n.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = PublisherI18ns(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := PublisherI18ns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPublisherI18nsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publisherI18n := &PublisherI18n{}
	if err = randomize.Struct(seed, publisherI18n, publisherI18nDBTypes, true, publisherI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisherI18n.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PublisherI18nSlice{publisherI18n}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := PublisherI18ns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testPublisherI18nsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publisherI18n := &PublisherI18n{}
	if err = randomize.Struct(seed, publisherI18n, publisherI18nDBTypes, true, publisherI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisherI18n.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := PublisherI18nExists(tx, publisherI18n.PublisherID, publisherI18n.Language)
	if err != nil {
		t.Errorf("Unable to check if PublisherI18n exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PublisherI18nExistsG to return true, but got false.")
	}
}
func testPublisherI18nsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publisherI18n := &PublisherI18n{}
	if err = randomize.Struct(seed, publisherI18n, publisherI18nDBTypes, true, publisherI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisherI18n.Insert(tx); err != nil {
		t.Error(err)
	}

	publisherI18nFound, err := FindPublisherI18n(tx, publisherI18n.PublisherID, publisherI18n.Language)
	if err != nil {
		t.Error(err)
	}

	if publisherI18nFound == nil {
		t.Error("want a record, got nil")
	}
}
func testPublisherI18nsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publisherI18n := &PublisherI18n{}
	if err = randomize.Struct(seed, publisherI18n, publisherI18nDBTypes, true, publisherI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisherI18n.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = PublisherI18ns(tx).Bind(publisherI18n); err != nil {
		t.Error(err)
	}
}

func testPublisherI18nsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publisherI18n := &PublisherI18n{}
	if err = randomize.Struct(seed, publisherI18n, publisherI18nDBTypes, true, publisherI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisherI18n.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := PublisherI18ns(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPublisherI18nsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publisherI18nOne := &PublisherI18n{}
	publisherI18nTwo := &PublisherI18n{}
	if err = randomize.Struct(seed, publisherI18nOne, publisherI18nDBTypes, false, publisherI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherI18n struct: %s", err)
	}
	if err = randomize.Struct(seed, publisherI18nTwo, publisherI18nDBTypes, false, publisherI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisherI18nOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = publisherI18nTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := PublisherI18ns(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPublisherI18nsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	publisherI18nOne := &PublisherI18n{}
	publisherI18nTwo := &PublisherI18n{}
	if err = randomize.Struct(seed, publisherI18nOne, publisherI18nDBTypes, false, publisherI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherI18n struct: %s", err)
	}
	if err = randomize.Struct(seed, publisherI18nTwo, publisherI18nDBTypes, false, publisherI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisherI18nOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = publisherI18nTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PublisherI18ns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testPublisherI18nsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publisherI18n := &PublisherI18n{}
	if err = randomize.Struct(seed, publisherI18n, publisherI18nDBTypes, true, publisherI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisherI18n.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PublisherI18ns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPublisherI18nsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publisherI18n := &PublisherI18n{}
	if err = randomize.Struct(seed, publisherI18n, publisherI18nDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PublisherI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisherI18n.Insert(tx, publisherI18nColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := PublisherI18ns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPublisherI18nToOnePublisherUsingPublisher(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local PublisherI18n
	var foreign Publisher

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, publisherI18nDBTypes, false, publisherI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherI18n struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, publisherDBTypes, false, publisherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.PublisherID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Publisher(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PublisherI18nSlice{&local}
	if err = local.L.LoadPublisher(tx, false, (*[]*PublisherI18n)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Publisher == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Publisher = nil
	if err = local.L.LoadPublisher(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Publisher == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPublisherI18nToOneUserUsingUser(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local PublisherI18n
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, publisherI18nDBTypes, true, publisherI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherI18n struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	local.UserID.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.UserID.Int64 = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.User(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PublisherI18nSlice{&local}
	if err = local.L.LoadUser(tx, false, (*[]*PublisherI18n)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPublisherI18nToOneSetOpPublisherUsingPublisher(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a PublisherI18n
	var b, c Publisher

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, publisherI18nDBTypes, false, strmangle.SetComplement(publisherI18nPrimaryKeyColumns, publisherI18nColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, publisherDBTypes, false, strmangle.SetComplement(publisherPrimaryKeyColumns, publisherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, publisherDBTypes, false, strmangle.SetComplement(publisherPrimaryKeyColumns, publisherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Publisher{&b, &c} {
		err = a.SetPublisher(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Publisher != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PublisherI18ns[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PublisherID != x.ID {
			t.Error("foreign key was wrong value", a.PublisherID)
		}

		if exists, err := PublisherI18nExists(tx, a.PublisherID, a.Language); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testPublisherI18nToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a PublisherI18n
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, publisherI18nDBTypes, false, strmangle.SetComplement(publisherI18nPrimaryKeyColumns, publisherI18nColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PublisherI18ns[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID.Int64 != x.ID {
			t.Error("foreign key was wrong value", a.UserID.Int64)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID.Int64))
		reflect.Indirect(reflect.ValueOf(&a.UserID.Int64)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID.Int64 != x.ID {
			t.Error("foreign key was wrong value", a.UserID.Int64, x.ID)
		}
	}
}

func testPublisherI18nToOneRemoveOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a PublisherI18n
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, publisherI18nDBTypes, false, strmangle.SetComplement(publisherI18nPrimaryKeyColumns, publisherI18nColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUser(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUser(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.User(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.User != nil {
		t.Error("R struct entry should be nil")
	}

	if a.UserID.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.PublisherI18ns) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testPublisherI18nsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publisherI18n := &PublisherI18n{}
	if err = randomize.Struct(seed, publisherI18n, publisherI18nDBTypes, true, publisherI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisherI18n.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = publisherI18n.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPublisherI18nsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publisherI18n := &PublisherI18n{}
	if err = randomize.Struct(seed, publisherI18n, publisherI18nDBTypes, true, publisherI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisherI18n.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PublisherI18nSlice{publisherI18n}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testPublisherI18nsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publisherI18n := &PublisherI18n{}
	if err = randomize.Struct(seed, publisherI18n, publisherI18nDBTypes, true, publisherI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisherI18n.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := PublisherI18ns(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	publisherI18nDBTypes = map[string]string{`CreatedAt`: `timestamp with time zone`, `Description`: `text`, `Language`: `character`, `Name`: `text`, `OriginalLanguage`: `character`, `PublisherID`: `bigint`, `UserID`: `bigint`}
	_                    = bytes.MinRead
)

func testPublisherI18nsUpdate(t *testing.T) {
	t.Parallel()

	if len(publisherI18nColumns) == len(publisherI18nPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	publisherI18n := &PublisherI18n{}
	if err = randomize.Struct(seed, publisherI18n, publisherI18nDBTypes, true, publisherI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisherI18n.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PublisherI18ns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, publisherI18n, publisherI18nDBTypes, true, publisherI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherI18n struct: %s", err)
	}

	if err = publisherI18n.Update(tx); err != nil {
		t.Error(err)
	}
}

func testPublisherI18nsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(publisherI18nColumns) == len(publisherI18nPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	publisherI18n := &PublisherI18n{}
	if err = randomize.Struct(seed, publisherI18n, publisherI18nDBTypes, true, publisherI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisherI18n.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PublisherI18ns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, publisherI18n, publisherI18nDBTypes, true, publisherI18nPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PublisherI18n struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(publisherI18nColumns, publisherI18nPrimaryKeyColumns) {
		fields = publisherI18nColumns
	} else {
		fields = strmangle.SetComplement(
			publisherI18nColumns,
			publisherI18nPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(publisherI18n))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := PublisherI18nSlice{publisherI18n}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testPublisherI18nsUpsert(t *testing.T) {
	t.Parallel()

	if len(publisherI18nColumns) == len(publisherI18nPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	publisherI18n := PublisherI18n{}
	if err = randomize.Struct(seed, &publisherI18n, publisherI18nDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PublisherI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisherI18n.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert PublisherI18n: %s", err)
	}

	count, err := PublisherI18ns(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &publisherI18n, publisherI18nDBTypes, false, publisherI18nPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PublisherI18n struct: %s", err)
	}

	if err = publisherI18n.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert PublisherI18n: %s", err)
	}

	count, err = PublisherI18ns(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
