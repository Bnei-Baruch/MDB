// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testTwitterTweets(t *testing.T) {
	t.Parallel()

	query := TwitterTweets(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testTwitterTweetsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	twitterTweet := &TwitterTweet{}
	if err = randomize.Struct(seed, twitterTweet, twitterTweetDBTypes, true, twitterTweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TwitterTweet struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = twitterTweet.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = twitterTweet.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := TwitterTweets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTwitterTweetsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	twitterTweet := &TwitterTweet{}
	if err = randomize.Struct(seed, twitterTweet, twitterTweetDBTypes, true, twitterTweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TwitterTweet struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = twitterTweet.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = TwitterTweets(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := TwitterTweets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTwitterTweetsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	twitterTweet := &TwitterTweet{}
	if err = randomize.Struct(seed, twitterTweet, twitterTweetDBTypes, true, twitterTweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TwitterTweet struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = twitterTweet.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := TwitterTweetSlice{twitterTweet}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := TwitterTweets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testTwitterTweetsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	twitterTweet := &TwitterTweet{}
	if err = randomize.Struct(seed, twitterTweet, twitterTweetDBTypes, true, twitterTweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TwitterTweet struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = twitterTweet.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := TwitterTweetExists(tx, twitterTweet.ID)
	if err != nil {
		t.Errorf("Unable to check if TwitterTweet exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TwitterTweetExistsG to return true, but got false.")
	}
}
func testTwitterTweetsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	twitterTweet := &TwitterTweet{}
	if err = randomize.Struct(seed, twitterTweet, twitterTweetDBTypes, true, twitterTweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TwitterTweet struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = twitterTweet.Insert(tx); err != nil {
		t.Error(err)
	}

	twitterTweetFound, err := FindTwitterTweet(tx, twitterTweet.ID)
	if err != nil {
		t.Error(err)
	}

	if twitterTweetFound == nil {
		t.Error("want a record, got nil")
	}
}
func testTwitterTweetsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	twitterTweet := &TwitterTweet{}
	if err = randomize.Struct(seed, twitterTweet, twitterTweetDBTypes, true, twitterTweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TwitterTweet struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = twitterTweet.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = TwitterTweets(tx).Bind(twitterTweet); err != nil {
		t.Error(err)
	}
}

func testTwitterTweetsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	twitterTweet := &TwitterTweet{}
	if err = randomize.Struct(seed, twitterTweet, twitterTweetDBTypes, true, twitterTweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TwitterTweet struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = twitterTweet.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := TwitterTweets(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTwitterTweetsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	twitterTweetOne := &TwitterTweet{}
	twitterTweetTwo := &TwitterTweet{}
	if err = randomize.Struct(seed, twitterTweetOne, twitterTweetDBTypes, false, twitterTweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TwitterTweet struct: %s", err)
	}
	if err = randomize.Struct(seed, twitterTweetTwo, twitterTweetDBTypes, false, twitterTweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TwitterTweet struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = twitterTweetOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = twitterTweetTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := TwitterTweets(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTwitterTweetsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	twitterTweetOne := &TwitterTweet{}
	twitterTweetTwo := &TwitterTweet{}
	if err = randomize.Struct(seed, twitterTweetOne, twitterTweetDBTypes, false, twitterTweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TwitterTweet struct: %s", err)
	}
	if err = randomize.Struct(seed, twitterTweetTwo, twitterTweetDBTypes, false, twitterTweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TwitterTweet struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = twitterTweetOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = twitterTweetTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := TwitterTweets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testTwitterTweetsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	twitterTweet := &TwitterTweet{}
	if err = randomize.Struct(seed, twitterTweet, twitterTweetDBTypes, true, twitterTweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TwitterTweet struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = twitterTweet.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := TwitterTweets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTwitterTweetsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	twitterTweet := &TwitterTweet{}
	if err = randomize.Struct(seed, twitterTweet, twitterTweetDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TwitterTweet struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = twitterTweet.Insert(tx, twitterTweetColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := TwitterTweets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTwitterTweetToOneTwitterUserUsingUser(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local TwitterTweet
	var foreign TwitterUser

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, twitterTweetDBTypes, false, twitterTweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TwitterTweet struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, twitterUserDBTypes, false, twitterUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TwitterUser struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.User(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TwitterTweetSlice{&local}
	if err = local.L.LoadUser(tx, false, (*[]*TwitterTweet)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTwitterTweetToOneSetOpTwitterUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a TwitterTweet
	var b, c TwitterUser

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, twitterTweetDBTypes, false, strmangle.SetComplement(twitterTweetPrimaryKeyColumns, twitterTweetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, twitterUserDBTypes, false, strmangle.SetComplement(twitterUserPrimaryKeyColumns, twitterUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, twitterUserDBTypes, false, strmangle.SetComplement(twitterUserPrimaryKeyColumns, twitterUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*TwitterUser{&b, &c} {
		err = a.SetUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserTwitterTweets[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}
func testTwitterTweetsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	twitterTweet := &TwitterTweet{}
	if err = randomize.Struct(seed, twitterTweet, twitterTweetDBTypes, true, twitterTweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TwitterTweet struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = twitterTweet.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = twitterTweet.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testTwitterTweetsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	twitterTweet := &TwitterTweet{}
	if err = randomize.Struct(seed, twitterTweet, twitterTweetDBTypes, true, twitterTweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TwitterTweet struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = twitterTweet.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := TwitterTweetSlice{twitterTweet}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testTwitterTweetsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	twitterTweet := &TwitterTweet{}
	if err = randomize.Struct(seed, twitterTweet, twitterTweetDBTypes, true, twitterTweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TwitterTweet struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = twitterTweet.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := TwitterTweets(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	twitterTweetDBTypes = map[string]string{`CreatedAt`: `timestamp with time zone`, `FullText`: `text`, `ID`: `bigint`, `Raw`: `jsonb`, `TweetAt`: `timestamp with time zone`, `TwitterID`: `character varying`, `UserID`: `bigint`}
	_                   = bytes.MinRead
)

func testTwitterTweetsUpdate(t *testing.T) {
	t.Parallel()

	if len(twitterTweetColumns) == len(twitterTweetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	twitterTweet := &TwitterTweet{}
	if err = randomize.Struct(seed, twitterTweet, twitterTweetDBTypes, true, twitterTweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TwitterTweet struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = twitterTweet.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := TwitterTweets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, twitterTweet, twitterTweetDBTypes, true, twitterTweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TwitterTweet struct: %s", err)
	}

	if err = twitterTweet.Update(tx); err != nil {
		t.Error(err)
	}
}

func testTwitterTweetsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(twitterTweetColumns) == len(twitterTweetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	twitterTweet := &TwitterTweet{}
	if err = randomize.Struct(seed, twitterTweet, twitterTweetDBTypes, true, twitterTweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TwitterTweet struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = twitterTweet.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := TwitterTweets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, twitterTweet, twitterTweetDBTypes, true, twitterTweetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TwitterTweet struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(twitterTweetColumns, twitterTweetPrimaryKeyColumns) {
		fields = twitterTweetColumns
	} else {
		fields = strmangle.SetComplement(
			twitterTweetColumns,
			twitterTweetPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(twitterTweet))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := TwitterTweetSlice{twitterTweet}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testTwitterTweetsUpsert(t *testing.T) {
	t.Parallel()

	if len(twitterTweetColumns) == len(twitterTweetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	twitterTweet := TwitterTweet{}
	if err = randomize.Struct(seed, &twitterTweet, twitterTweetDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TwitterTweet struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = twitterTweet.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert TwitterTweet: %s", err)
	}

	count, err := TwitterTweets(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &twitterTweet, twitterTweetDBTypes, false, twitterTweetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TwitterTweet struct: %s", err)
	}

	if err = twitterTweet.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert TwitterTweet: %s", err)
	}

	count, err = TwitterTweets(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
