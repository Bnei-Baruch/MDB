// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testContentUnitDerivations(t *testing.T) {
	t.Parallel()

	query := ContentUnitDerivations(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testContentUnitDerivationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contentUnitDerivation := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, contentUnitDerivation, contentUnitDerivationDBTypes, true, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentUnitDerivation.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = contentUnitDerivation.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := ContentUnitDerivations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testContentUnitDerivationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contentUnitDerivation := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, contentUnitDerivation, contentUnitDerivationDBTypes, true, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentUnitDerivation.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = ContentUnitDerivations(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := ContentUnitDerivations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testContentUnitDerivationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contentUnitDerivation := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, contentUnitDerivation, contentUnitDerivationDBTypes, true, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentUnitDerivation.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ContentUnitDerivationSlice{contentUnitDerivation}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := ContentUnitDerivations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testContentUnitDerivationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contentUnitDerivation := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, contentUnitDerivation, contentUnitDerivationDBTypes, true, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentUnitDerivation.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := ContentUnitDerivationExists(tx, contentUnitDerivation.SourceID, contentUnitDerivation.DerivedID)
	if err != nil {
		t.Errorf("Unable to check if ContentUnitDerivation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ContentUnitDerivationExistsG to return true, but got false.")
	}
}
func testContentUnitDerivationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contentUnitDerivation := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, contentUnitDerivation, contentUnitDerivationDBTypes, true, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentUnitDerivation.Insert(tx); err != nil {
		t.Error(err)
	}

	contentUnitDerivationFound, err := FindContentUnitDerivation(tx, contentUnitDerivation.SourceID, contentUnitDerivation.DerivedID)
	if err != nil {
		t.Error(err)
	}

	if contentUnitDerivationFound == nil {
		t.Error("want a record, got nil")
	}
}
func testContentUnitDerivationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contentUnitDerivation := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, contentUnitDerivation, contentUnitDerivationDBTypes, true, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentUnitDerivation.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = ContentUnitDerivations(tx).Bind(contentUnitDerivation); err != nil {
		t.Error(err)
	}
}

func testContentUnitDerivationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contentUnitDerivation := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, contentUnitDerivation, contentUnitDerivationDBTypes, true, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentUnitDerivation.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := ContentUnitDerivations(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testContentUnitDerivationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contentUnitDerivationOne := &ContentUnitDerivation{}
	contentUnitDerivationTwo := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, contentUnitDerivationOne, contentUnitDerivationDBTypes, false, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}
	if err = randomize.Struct(seed, contentUnitDerivationTwo, contentUnitDerivationDBTypes, false, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentUnitDerivationOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = contentUnitDerivationTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := ContentUnitDerivations(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testContentUnitDerivationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	contentUnitDerivationOne := &ContentUnitDerivation{}
	contentUnitDerivationTwo := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, contentUnitDerivationOne, contentUnitDerivationDBTypes, false, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}
	if err = randomize.Struct(seed, contentUnitDerivationTwo, contentUnitDerivationDBTypes, false, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentUnitDerivationOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = contentUnitDerivationTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ContentUnitDerivations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testContentUnitDerivationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contentUnitDerivation := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, contentUnitDerivation, contentUnitDerivationDBTypes, true, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentUnitDerivation.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ContentUnitDerivations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testContentUnitDerivationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contentUnitDerivation := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, contentUnitDerivation, contentUnitDerivationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentUnitDerivation.Insert(tx, contentUnitDerivationColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := ContentUnitDerivations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testContentUnitDerivationToOneContentUnitUsingDerived(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local ContentUnitDerivation
	var foreign ContentUnit

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, contentUnitDerivationDBTypes, false, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, contentUnitDBTypes, false, contentUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnit struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.DerivedID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Derived(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ContentUnitDerivationSlice{&local}
	if err = local.L.LoadDerived(tx, false, (*[]*ContentUnitDerivation)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Derived == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Derived = nil
	if err = local.L.LoadDerived(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Derived == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testContentUnitDerivationToOneContentUnitUsingSource(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local ContentUnitDerivation
	var foreign ContentUnit

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, contentUnitDerivationDBTypes, false, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, contentUnitDBTypes, false, contentUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnit struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.SourceID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Source(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ContentUnitDerivationSlice{&local}
	if err = local.L.LoadSource(tx, false, (*[]*ContentUnitDerivation)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Source == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Source = nil
	if err = local.L.LoadSource(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Source == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testContentUnitDerivationToOneSetOpContentUnitUsingDerived(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a ContentUnitDerivation
	var b, c ContentUnit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, contentUnitDerivationDBTypes, false, strmangle.SetComplement(contentUnitDerivationPrimaryKeyColumns, contentUnitDerivationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, contentUnitDBTypes, false, strmangle.SetComplement(contentUnitPrimaryKeyColumns, contentUnitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, contentUnitDBTypes, false, strmangle.SetComplement(contentUnitPrimaryKeyColumns, contentUnitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ContentUnit{&b, &c} {
		err = a.SetDerived(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Derived != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DerivedContentUnitDerivations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DerivedID != x.ID {
			t.Error("foreign key was wrong value", a.DerivedID)
		}

		if exists, err := ContentUnitDerivationExists(tx, a.SourceID, a.DerivedID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testContentUnitDerivationToOneSetOpContentUnitUsingSource(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a ContentUnitDerivation
	var b, c ContentUnit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, contentUnitDerivationDBTypes, false, strmangle.SetComplement(contentUnitDerivationPrimaryKeyColumns, contentUnitDerivationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, contentUnitDBTypes, false, strmangle.SetComplement(contentUnitPrimaryKeyColumns, contentUnitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, contentUnitDBTypes, false, strmangle.SetComplement(contentUnitPrimaryKeyColumns, contentUnitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ContentUnit{&b, &c} {
		err = a.SetSource(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Source != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SourceContentUnitDerivations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SourceID != x.ID {
			t.Error("foreign key was wrong value", a.SourceID)
		}

		if exists, err := ContentUnitDerivationExists(tx, a.SourceID, a.DerivedID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testContentUnitDerivationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contentUnitDerivation := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, contentUnitDerivation, contentUnitDerivationDBTypes, true, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentUnitDerivation.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = contentUnitDerivation.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testContentUnitDerivationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contentUnitDerivation := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, contentUnitDerivation, contentUnitDerivationDBTypes, true, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentUnitDerivation.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ContentUnitDerivationSlice{contentUnitDerivation}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testContentUnitDerivationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contentUnitDerivation := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, contentUnitDerivation, contentUnitDerivationDBTypes, true, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentUnitDerivation.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := ContentUnitDerivations(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	contentUnitDerivationDBTypes = map[string]string{`DerivedID`: `bigint`, `Name`: `character varying`, `SourceID`: `bigint`}
	_                            = bytes.MinRead
)

func testContentUnitDerivationsUpdate(t *testing.T) {
	t.Parallel()

	if len(contentUnitDerivationColumns) == len(contentUnitDerivationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	contentUnitDerivation := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, contentUnitDerivation, contentUnitDerivationDBTypes, true, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentUnitDerivation.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ContentUnitDerivations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, contentUnitDerivation, contentUnitDerivationDBTypes, true, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	if err = contentUnitDerivation.Update(tx); err != nil {
		t.Error(err)
	}
}

func testContentUnitDerivationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(contentUnitDerivationColumns) == len(contentUnitDerivationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	contentUnitDerivation := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, contentUnitDerivation, contentUnitDerivationDBTypes, true, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentUnitDerivation.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ContentUnitDerivations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, contentUnitDerivation, contentUnitDerivationDBTypes, true, contentUnitDerivationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(contentUnitDerivationColumns, contentUnitDerivationPrimaryKeyColumns) {
		fields = contentUnitDerivationColumns
	} else {
		fields = strmangle.SetComplement(
			contentUnitDerivationColumns,
			contentUnitDerivationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(contentUnitDerivation))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := ContentUnitDerivationSlice{contentUnitDerivation}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testContentUnitDerivationsUpsert(t *testing.T) {
	t.Parallel()

	if len(contentUnitDerivationColumns) == len(contentUnitDerivationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	contentUnitDerivation := ContentUnitDerivation{}
	if err = randomize.Struct(seed, &contentUnitDerivation, contentUnitDerivationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentUnitDerivation.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert ContentUnitDerivation: %s", err)
	}

	count, err := ContentUnitDerivations(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &contentUnitDerivation, contentUnitDerivationDBTypes, false, contentUnitDerivationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	if err = contentUnitDerivation.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert ContentUnitDerivation: %s", err)
	}

	count, err = ContentUnitDerivations(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
