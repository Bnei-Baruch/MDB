// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testPublishers(t *testing.T) {
	t.Parallel()

	query := Publishers(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testPublishersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publisher := &Publisher{}
	if err = randomize.Struct(seed, publisher, publisherDBTypes, true, publisherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisher.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = publisher.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Publishers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPublishersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publisher := &Publisher{}
	if err = randomize.Struct(seed, publisher, publisherDBTypes, true, publisherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisher.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Publishers(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Publishers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPublishersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publisher := &Publisher{}
	if err = randomize.Struct(seed, publisher, publisherDBTypes, true, publisherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisher.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PublisherSlice{publisher}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Publishers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testPublishersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publisher := &Publisher{}
	if err = randomize.Struct(seed, publisher, publisherDBTypes, true, publisherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisher.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := PublisherExists(tx, publisher.ID)
	if err != nil {
		t.Errorf("Unable to check if Publisher exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PublisherExistsG to return true, but got false.")
	}
}
func testPublishersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publisher := &Publisher{}
	if err = randomize.Struct(seed, publisher, publisherDBTypes, true, publisherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisher.Insert(tx); err != nil {
		t.Error(err)
	}

	publisherFound, err := FindPublisher(tx, publisher.ID)
	if err != nil {
		t.Error(err)
	}

	if publisherFound == nil {
		t.Error("want a record, got nil")
	}
}
func testPublishersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publisher := &Publisher{}
	if err = randomize.Struct(seed, publisher, publisherDBTypes, true, publisherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisher.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Publishers(tx).Bind(publisher); err != nil {
		t.Error(err)
	}
}

func testPublishersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publisher := &Publisher{}
	if err = randomize.Struct(seed, publisher, publisherDBTypes, true, publisherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisher.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Publishers(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPublishersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publisherOne := &Publisher{}
	publisherTwo := &Publisher{}
	if err = randomize.Struct(seed, publisherOne, publisherDBTypes, false, publisherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}
	if err = randomize.Struct(seed, publisherTwo, publisherDBTypes, false, publisherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisherOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = publisherTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Publishers(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPublishersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	publisherOne := &Publisher{}
	publisherTwo := &Publisher{}
	if err = randomize.Struct(seed, publisherOne, publisherDBTypes, false, publisherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}
	if err = randomize.Struct(seed, publisherTwo, publisherDBTypes, false, publisherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisherOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = publisherTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Publishers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testPublishersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publisher := &Publisher{}
	if err = randomize.Struct(seed, publisher, publisherDBTypes, true, publisherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisher.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Publishers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPublishersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publisher := &Publisher{}
	if err = randomize.Struct(seed, publisher, publisherDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisher.Insert(tx, publisherColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Publishers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPublisherToManyContentUnits(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Publisher
	var b, c ContentUnit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, publisherDBTypes, true, publisherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, contentUnitDBTypes, false, contentUnitColumnsWithDefault...)
	randomize.Struct(seed, &c, contentUnitDBTypes, false, contentUnitColumnsWithDefault...)

	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"content_units_publishers\" (\"publisher_id\", \"content_unit_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"content_units_publishers\" (\"publisher_id\", \"content_unit_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	contentUnit, err := a.ContentUnits(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range contentUnit {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PublisherSlice{&a}
	if err = a.L.LoadContentUnits(tx, false, (*[]*Publisher)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ContentUnits); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ContentUnits = nil
	if err = a.L.LoadContentUnits(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ContentUnits); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", contentUnit)
	}
}

func testPublisherToManyPublisherI18ns(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Publisher
	var b, c PublisherI18n

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, publisherDBTypes, true, publisherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, publisherI18nDBTypes, false, publisherI18nColumnsWithDefault...)
	randomize.Struct(seed, &c, publisherI18nDBTypes, false, publisherI18nColumnsWithDefault...)

	b.PublisherID = a.ID
	c.PublisherID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	publisherI18n, err := a.PublisherI18ns(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range publisherI18n {
		if v.PublisherID == b.PublisherID {
			bFound = true
		}
		if v.PublisherID == c.PublisherID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PublisherSlice{&a}
	if err = a.L.LoadPublisherI18ns(tx, false, (*[]*Publisher)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PublisherI18ns); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PublisherI18ns = nil
	if err = a.L.LoadPublisherI18ns(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PublisherI18ns); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", publisherI18n)
	}
}

func testPublisherToManyAddOpContentUnits(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Publisher
	var b, c, d, e ContentUnit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, publisherDBTypes, false, strmangle.SetComplement(publisherPrimaryKeyColumns, publisherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ContentUnit{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, contentUnitDBTypes, false, strmangle.SetComplement(contentUnitPrimaryKeyColumns, contentUnitColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ContentUnit{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddContentUnits(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Publishers[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Publishers[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.ContentUnits[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ContentUnits[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ContentUnits(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPublisherToManySetOpContentUnits(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Publisher
	var b, c, d, e ContentUnit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, publisherDBTypes, false, strmangle.SetComplement(publisherPrimaryKeyColumns, publisherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ContentUnit{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, contentUnitDBTypes, false, strmangle.SetComplement(contentUnitPrimaryKeyColumns, contentUnitColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetContentUnits(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ContentUnits(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetContentUnits(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ContentUnits(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Publishers) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Publishers) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Publishers[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Publishers[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.ContentUnits[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ContentUnits[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPublisherToManyRemoveOpContentUnits(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Publisher
	var b, c, d, e ContentUnit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, publisherDBTypes, false, strmangle.SetComplement(publisherPrimaryKeyColumns, publisherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ContentUnit{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, contentUnitDBTypes, false, strmangle.SetComplement(contentUnitPrimaryKeyColumns, contentUnitColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddContentUnits(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ContentUnits(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveContentUnits(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ContentUnits(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Publishers) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Publishers) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Publishers[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Publishers[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.ContentUnits) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ContentUnits[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ContentUnits[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPublisherToManyAddOpPublisherI18ns(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Publisher
	var b, c, d, e PublisherI18n

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, publisherDBTypes, false, strmangle.SetComplement(publisherPrimaryKeyColumns, publisherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PublisherI18n{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, publisherI18nDBTypes, false, strmangle.SetComplement(publisherI18nPrimaryKeyColumns, publisherI18nColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PublisherI18n{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPublisherI18ns(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PublisherID {
			t.Error("foreign key was wrong value", a.ID, first.PublisherID)
		}
		if a.ID != second.PublisherID {
			t.Error("foreign key was wrong value", a.ID, second.PublisherID)
		}

		if first.R.Publisher != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Publisher != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PublisherI18ns[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PublisherI18ns[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PublisherI18ns(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPublishersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publisher := &Publisher{}
	if err = randomize.Struct(seed, publisher, publisherDBTypes, true, publisherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisher.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = publisher.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPublishersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publisher := &Publisher{}
	if err = randomize.Struct(seed, publisher, publisherDBTypes, true, publisherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisher.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PublisherSlice{publisher}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testPublishersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publisher := &Publisher{}
	if err = randomize.Struct(seed, publisher, publisherDBTypes, true, publisherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisher.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Publishers(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	publisherDBTypes = map[string]string{`ID`: `bigint`, `Pattern`: `character varying`, `UID`: `character`}
	_                = bytes.MinRead
)

func testPublishersUpdate(t *testing.T) {
	t.Parallel()

	if len(publisherColumns) == len(publisherPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	publisher := &Publisher{}
	if err = randomize.Struct(seed, publisher, publisherDBTypes, true, publisherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisher.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Publishers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, publisher, publisherDBTypes, true, publisherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}

	if err = publisher.Update(tx); err != nil {
		t.Error(err)
	}
}

func testPublishersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(publisherColumns) == len(publisherPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	publisher := &Publisher{}
	if err = randomize.Struct(seed, publisher, publisherDBTypes, true, publisherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisher.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Publishers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, publisher, publisherDBTypes, true, publisherPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(publisherColumns, publisherPrimaryKeyColumns) {
		fields = publisherColumns
	} else {
		fields = strmangle.SetComplement(
			publisherColumns,
			publisherPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(publisher))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := PublisherSlice{publisher}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testPublishersUpsert(t *testing.T) {
	t.Parallel()

	if len(publisherColumns) == len(publisherPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	publisher := Publisher{}
	if err = randomize.Struct(seed, &publisher, publisherDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = publisher.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Publisher: %s", err)
	}

	count, err := Publishers(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &publisher, publisherDBTypes, false, publisherPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}

	if err = publisher.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Publisher: %s", err)
	}

	count, err = Publishers(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
