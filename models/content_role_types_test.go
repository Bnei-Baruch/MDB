// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testContentRoleTypes(t *testing.T) {
	t.Parallel()

	query := ContentRoleTypes(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testContentRoleTypesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contentRoleType := &ContentRoleType{}
	if err = randomize.Struct(seed, contentRoleType, contentRoleTypeDBTypes, true, contentRoleTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentRoleType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentRoleType.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = contentRoleType.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := ContentRoleTypes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testContentRoleTypesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contentRoleType := &ContentRoleType{}
	if err = randomize.Struct(seed, contentRoleType, contentRoleTypeDBTypes, true, contentRoleTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentRoleType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentRoleType.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = ContentRoleTypes(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := ContentRoleTypes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testContentRoleTypesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contentRoleType := &ContentRoleType{}
	if err = randomize.Struct(seed, contentRoleType, contentRoleTypeDBTypes, true, contentRoleTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentRoleType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentRoleType.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ContentRoleTypeSlice{contentRoleType}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := ContentRoleTypes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testContentRoleTypesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contentRoleType := &ContentRoleType{}
	if err = randomize.Struct(seed, contentRoleType, contentRoleTypeDBTypes, true, contentRoleTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentRoleType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentRoleType.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := ContentRoleTypeExists(tx, contentRoleType.ID)
	if err != nil {
		t.Errorf("Unable to check if ContentRoleType exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ContentRoleTypeExistsG to return true, but got false.")
	}
}
func testContentRoleTypesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contentRoleType := &ContentRoleType{}
	if err = randomize.Struct(seed, contentRoleType, contentRoleTypeDBTypes, true, contentRoleTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentRoleType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentRoleType.Insert(tx); err != nil {
		t.Error(err)
	}

	contentRoleTypeFound, err := FindContentRoleType(tx, contentRoleType.ID)
	if err != nil {
		t.Error(err)
	}

	if contentRoleTypeFound == nil {
		t.Error("want a record, got nil")
	}
}
func testContentRoleTypesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contentRoleType := &ContentRoleType{}
	if err = randomize.Struct(seed, contentRoleType, contentRoleTypeDBTypes, true, contentRoleTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentRoleType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentRoleType.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = ContentRoleTypes(tx).Bind(contentRoleType); err != nil {
		t.Error(err)
	}
}

func testContentRoleTypesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contentRoleType := &ContentRoleType{}
	if err = randomize.Struct(seed, contentRoleType, contentRoleTypeDBTypes, true, contentRoleTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentRoleType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentRoleType.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := ContentRoleTypes(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testContentRoleTypesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contentRoleTypeOne := &ContentRoleType{}
	contentRoleTypeTwo := &ContentRoleType{}
	if err = randomize.Struct(seed, contentRoleTypeOne, contentRoleTypeDBTypes, false, contentRoleTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentRoleType struct: %s", err)
	}
	if err = randomize.Struct(seed, contentRoleTypeTwo, contentRoleTypeDBTypes, false, contentRoleTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentRoleType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentRoleTypeOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = contentRoleTypeTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := ContentRoleTypes(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testContentRoleTypesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	contentRoleTypeOne := &ContentRoleType{}
	contentRoleTypeTwo := &ContentRoleType{}
	if err = randomize.Struct(seed, contentRoleTypeOne, contentRoleTypeDBTypes, false, contentRoleTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentRoleType struct: %s", err)
	}
	if err = randomize.Struct(seed, contentRoleTypeTwo, contentRoleTypeDBTypes, false, contentRoleTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentRoleType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentRoleTypeOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = contentRoleTypeTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ContentRoleTypes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testContentRoleTypesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contentRoleType := &ContentRoleType{}
	if err = randomize.Struct(seed, contentRoleType, contentRoleTypeDBTypes, true, contentRoleTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentRoleType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentRoleType.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ContentRoleTypes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testContentRoleTypesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contentRoleType := &ContentRoleType{}
	if err = randomize.Struct(seed, contentRoleType, contentRoleTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ContentRoleType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentRoleType.Insert(tx, contentRoleTypeColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := ContentRoleTypes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testContentRoleTypeToManyRoleContentUnitsPersons(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a ContentRoleType
	var b, c ContentUnitsPerson

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, contentRoleTypeDBTypes, true, contentRoleTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentRoleType struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, contentUnitsPersonDBTypes, false, contentUnitsPersonColumnsWithDefault...)
	randomize.Struct(seed, &c, contentUnitsPersonDBTypes, false, contentUnitsPersonColumnsWithDefault...)

	b.RoleID = a.ID
	c.RoleID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	contentUnitsPerson, err := a.RoleContentUnitsPersons(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range contentUnitsPerson {
		if v.RoleID == b.RoleID {
			bFound = true
		}
		if v.RoleID == c.RoleID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ContentRoleTypeSlice{&a}
	if err = a.L.LoadRoleContentUnitsPersons(tx, false, (*[]*ContentRoleType)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RoleContentUnitsPersons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RoleContentUnitsPersons = nil
	if err = a.L.LoadRoleContentUnitsPersons(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RoleContentUnitsPersons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", contentUnitsPerson)
	}
}

func testContentRoleTypeToManyAddOpRoleContentUnitsPersons(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a ContentRoleType
	var b, c, d, e ContentUnitsPerson

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, contentRoleTypeDBTypes, false, strmangle.SetComplement(contentRoleTypePrimaryKeyColumns, contentRoleTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ContentUnitsPerson{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, contentUnitsPersonDBTypes, false, strmangle.SetComplement(contentUnitsPersonPrimaryKeyColumns, contentUnitsPersonColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ContentUnitsPerson{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRoleContentUnitsPersons(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.RoleID {
			t.Error("foreign key was wrong value", a.ID, first.RoleID)
		}
		if a.ID != second.RoleID {
			t.Error("foreign key was wrong value", a.ID, second.RoleID)
		}

		if first.R.Role != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Role != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RoleContentUnitsPersons[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RoleContentUnitsPersons[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RoleContentUnitsPersons(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testContentRoleTypesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contentRoleType := &ContentRoleType{}
	if err = randomize.Struct(seed, contentRoleType, contentRoleTypeDBTypes, true, contentRoleTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentRoleType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentRoleType.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = contentRoleType.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testContentRoleTypesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contentRoleType := &ContentRoleType{}
	if err = randomize.Struct(seed, contentRoleType, contentRoleTypeDBTypes, true, contentRoleTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentRoleType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentRoleType.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ContentRoleTypeSlice{contentRoleType}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testContentRoleTypesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contentRoleType := &ContentRoleType{}
	if err = randomize.Struct(seed, contentRoleType, contentRoleTypeDBTypes, true, contentRoleTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentRoleType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentRoleType.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := ContentRoleTypes(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	contentRoleTypeDBTypes = map[string]string{`Description`: `character varying`, `ID`: `bigint`, `Name`: `character varying`}
	_                      = bytes.MinRead
)

func testContentRoleTypesUpdate(t *testing.T) {
	t.Parallel()

	if len(contentRoleTypeColumns) == len(contentRoleTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	contentRoleType := &ContentRoleType{}
	if err = randomize.Struct(seed, contentRoleType, contentRoleTypeDBTypes, true, contentRoleTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentRoleType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentRoleType.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ContentRoleTypes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, contentRoleType, contentRoleTypeDBTypes, true, contentRoleTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentRoleType struct: %s", err)
	}

	if err = contentRoleType.Update(tx); err != nil {
		t.Error(err)
	}
}

func testContentRoleTypesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(contentRoleTypeColumns) == len(contentRoleTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	contentRoleType := &ContentRoleType{}
	if err = randomize.Struct(seed, contentRoleType, contentRoleTypeDBTypes, true, contentRoleTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentRoleType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentRoleType.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ContentRoleTypes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, contentRoleType, contentRoleTypeDBTypes, true, contentRoleTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ContentRoleType struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(contentRoleTypeColumns, contentRoleTypePrimaryKeyColumns) {
		fields = contentRoleTypeColumns
	} else {
		fields = strmangle.SetComplement(
			contentRoleTypeColumns,
			contentRoleTypePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(contentRoleType))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := ContentRoleTypeSlice{contentRoleType}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testContentRoleTypesUpsert(t *testing.T) {
	t.Parallel()

	if len(contentRoleTypeColumns) == len(contentRoleTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	contentRoleType := ContentRoleType{}
	if err = randomize.Struct(seed, &contentRoleType, contentRoleTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ContentRoleType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = contentRoleType.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert ContentRoleType: %s", err)
	}

	count, err := ContentRoleTypes(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &contentRoleType, contentRoleTypeDBTypes, false, contentRoleTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ContentRoleType struct: %s", err)
	}

	if err = contentRoleType.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert ContentRoleType: %s", err)
	}

	count, err = ContentRoleTypes(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
